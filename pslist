#!/usr/bin/env php
<?php
require(__DIR__ . "/inc/common.php");
define("PSCMD","list");

try {
    psCli::init($argv);
    $args = psCli::$args;
    $objects = array_shift($args);
    psCli::readcfg(Array("global","list",$objects));
    $args=psCli::$args;
    array_shift($args);
    if (strlen($objects)==0) {
        PsOut::error("Error! Enter objects you want to list.\n" . basename(__FILE__)
                . " resource [filter]... [id]... [property]\n"
                . "Filter(s):\n"
                . "property=value to match exactly\n"
                . "property>value to match objects with property bigger than value\n"
                . "property<value to match objects with property lower than value\n"
                . "property~value to match objects with property matched by regexp\n"
                . "id to match only objects with this ids\n"
                . "property to output given property.\n"
                . "Use --help to get more informations\n\n"
                );
    }
    $object = psCli::subobject($objects);
    $properties = psCli::$properties;
    $ids=Array();
    $filter=Array();
    foreach ($args as $arg) {
        if (is_numeric($arg)) {
            $ids[$arg]=$arg;
        } else {
                $filter[] = $arg;
        }
    }
    if (sizeof($filter)>0) {
        psFilter::create($filter,$objects);
    }
    if (psCli::$debug) {
        psOut::msg("Filter: ".print_r($filter,true)."\n");
    }
    psCli::initApi();
    $opt = array('resource' => $objects);
    if (psCli::$apifields) {
        $opt['display']="[".join(",",array_keys(psCli::$apifields))."]";
    }
    if (sizeof(psCli::$apifilter)>0) {
        foreach (psCli::$apifilter as $f =>$v) {
            $opt["filter[$f]"]="[$v]";
        }
    }
    psOut::progress("Getting data for $objects($object)...");
    $xml=psCli::apiCmd("get",$opt);
    psOut::progress(sprintf("Got %d objects.                   ",count($xml->$objects->children())));
    $data = $xml->$objects->children();
    $row = 0;
    $rows = Array();
    $cnt = sizeof($data);
    psOut::begin($objects, $object);
    foreach ($data as $r) {
        $id = (string) $r["id"];
        if (sizeof($ids)>0 && !array_key_exists($id,$ids)) {
            continue;
        }
        $rowdata = psGet::getValues($r);
        if (psFilter::$enabled) {
            psOut::progress(false, $row, $cnt);
            if (psFilter::$enabled && psFilter::isFiltered($r)) {
                if (psCli::$debug)
                    psOut::msg("Filtering $object $id due to filter.\n");
                continue;
            }
            psOut::write($rowdata);
        } else {
            psOut::write($rowdata);
        }
        $row++;
    }
    psOut::end($objects, $object);
} catch (PrestaShopWebserviceException $e) {
    // Here we are dealing with errors
    $trace = $e->getTrace();
    PsOut::error('Other error<br />' . $e->getMessage());
}


